// backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  passwordHash     String?
  role             Role              @default(CUSTOMER)
  name             String
  avatar           String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  lastLogin        DateTime?
  isActive         Boolean           @default(true)
  
  // Relations
  favorites        Favorite[]
  messagesSent     Message[]         @relation("SentMessages")
  messagesReceived Message[]         @relation("ReceivedMessages")
  makerProfile     MakerProfile?
  customerProfile  CustomerProfile?
  printRequests    PrintRequest[]    @relation("CustomerRequests")
  assignedPrints   PrintRequest[]    @relation("MakerAssignments")
  
  @@map("users")
}

model MakerProfile {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Printer capabilities
  materials         String[] // ["PLA", "ABS", "PETG", "TPU"]
  printerVolume     String   // "220x220x250mm"
  resolution        String   // "0.2mm"
  hasEnclosure      Boolean  @default(false)
  
  // Availability
  status            MakerStatus @default(OFFLINE)
  availability      String?  // "Weekdays 9-5" or custom text
  hourlyRate        Float?   // Optional pricing per hour
  
  // Location (optional)
  city              String?
  state             String?
  country           String   @default("US")
  
  // Stats
  completedPrints   Int      @default(0)
  rating            Float?
  totalRatings      Int      @default(0)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("maker_profiles")
}

model CustomerProfile {
  id               String   @id @default(uuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Preferences
  preferredMaterials String[] @default(["PLA"])
  maxBudget          Float?
  
  // Location for shipping estimates
  city               String?
  state              String?
  country            String   @default("US")
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  @@map("customer_profiles")
}

model ThingiverseModel {
  id            String   @id @default(uuid())
  thingId       String?  @unique // Original Thingiverse ID
  title         String
  description   String   @db.Text
  imageUrl      String
  sourceUrl     String
  tags          String[]
  license       String   @default("Creative Commons")
  authorName    String?
  publishedDate DateTime?
  downloadCount Int      @default(0)
  likeCount     Int      @default(0)
  complexity    String?  // "Beginner", "Intermediate", "Advanced"
  printTime     String?  // Estimated print time
  filamentUsed  String?  // Estimated filament usage
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  favorites     Favorite[]
  printRequests PrintRequest[]
  
  @@map("thingiverse_models")
}

model PrintRequest {
  id            String      @id @default(uuid())
  
  // References
  modelId       String
  model         ThingiverseModel @relation(fields: [modelId], references: [id])
  customerId    String
  customer      User        @relation("CustomerRequests", fields: [customerId], references: [id])
  makerId       String
  maker         User        @relation("MakerAssignments", fields: [makerId], references: [id])
  
  // Request details
  status        PrintStatus @default(REQUESTED)
  quantity      Int         @default(1)
  material      String      @default("PLA")
  color         String?     @default("Any")
  notes         String?     @db.Text
  urgency       String      @default("Normal") // "Low", "Normal", "High"
  
  // Pricing (optional)
  quotedPrice   Float?
  finalPrice    Float?
  
  // Timestamps
  createdAt     DateTime    @default(now())
  acceptedAt    DateTime?
  startedAt     DateTime?
  completedAt   DateTime?
  deliveredAt   DateTime?
  
  updatedAt     DateTime    @updatedAt
  
  @@map("print_requests")
}

model Message {
  id           String   @id @default(uuid())
  senderId     String
  receiverId   String
  content      String   @db.Text
  modelUrl     String?  // Optional reference to a model
  isRead       Boolean  @default(false)
  
  createdAt    DateTime @default(now())
  
  // Relations
  sender       User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver     User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  
  @@map("messages")
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  modelId   String
  
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  model     ThingiverseModel @relation(fields: [modelId], references: [id], onDelete: Cascade)
  
  @@unique([userId, modelId])
  @@map("favorites")
}

model Announcement {
  id          String   @id @default(uuid())
  title       String
  content     String   @db.Text
  type        String   @default("INFO") // "INFO", "WARNING", "SUCCESS", "ERROR"
  isActive    Boolean  @default(true)
  priority    Int      @default(0) // Higher numbers appear first
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("announcements")
}

// Enums
enum Role {
  CUSTOMER
  MAKER
  ADMIN
}

enum MakerStatus {
  ONLINE
  OFFLINE
  BUSY
  AWAY
}

enum PrintStatus {
  REQUESTED
  ACCEPTED
  PRINTING
  COMPLETED
  DELIVERED
  CANCELLED
  REJECTED
}